From 19cf5d0399ad9aa8a20b4028b2bc28dacf7595b2 Mon Sep 17 00:00:00 2001
From: smeikx <pac@man.vim>
Date: Sun, 22 Nov 2020 10:43:13 +0100
Subject: [PATCH] remove unused stuff; only keep syntax file

---
 ISSUE_TEMPLATE.md             |  13 -
 README.md                     | 125 ---------
 after/ftplugin/javascript.vim |  12 -
 compiler/eslint.vim           |  16 --
 extras/ctags                  |   8 -
 extras/flow.vim               | 109 --------
 extras/jsdoc.vim              |  39 ---
 extras/ngdoc.vim              |   3 -
 ftdetect/flow.vim             |   1 -
 ftdetect/javascript.vim       |   8 -
 indent/javascript.vim         | 477 ----------------------------------
 syntax/flow.vim               |   2 -
 12 files changed, 813 deletions(-)
 delete mode 100644 ISSUE_TEMPLATE.md
 delete mode 100644 README.md
 delete mode 100644 after/ftplugin/javascript.vim
 delete mode 100644 compiler/eslint.vim
 delete mode 100644 extras/ctags
 delete mode 100644 extras/flow.vim
 delete mode 100644 extras/jsdoc.vim
 delete mode 100644 extras/ngdoc.vim
 delete mode 100644 ftdetect/flow.vim
 delete mode 100644 ftdetect/javascript.vim
 delete mode 100644 indent/javascript.vim
 delete mode 100644 syntax/flow.vim

diff --git a/ISSUE_TEMPLATE.md b/ISSUE_TEMPLATE.md
deleted file mode 100644
index b1ddccb..0000000
--- a/ISSUE_TEMPLATE.md
+++ /dev/null
@@ -1,13 +0,0 @@
-*Requisite minimal reproducible example, formatted as plain text :*
-
-<hr>
-
-#### Optional: concerning jsx.
-PLEASE PLEASE PLEASE make sure you have properly
-setup and are sourcing this plugin https://github.com/mxw/vim-jsx
-
-WE DO NOT support JSX automatically, you need another plugin to add get this
-functionality.
-
-Make sure the bug still exists if you disable all other javascript plugins
-except the one noted above, mxw/vim-jsx
diff --git a/README.md b/README.md
deleted file mode 100644
index 06419b2..0000000
--- a/README.md
+++ /dev/null
@@ -1,125 +0,0 @@
-# vim-javascript
-
-JavaScript bundle for vim, this bundle provides syntax highlighting and
-improved indentation.
-
-
-## Installation
-
-### Install with native package manager
-
-      git clone https://github.com/pangloss/vim-javascript.git ~/.vim/pack/vim-javascript/start/vim-javascript
-
-since Vim 8.
-
-### Install with [pathogen](https://github.com/tpope/vim-pathogen)
-
-      git clone https://github.com/pangloss/vim-javascript.git ~/.vim/bundle/vim-javascript
-
-alternatively, use a package manager like [vim-plug](https://github.com/junegunn/vim-plug)
-
-
-## Configuration Variables
-
-The following variables control certain syntax highlighting plugins. You can
-add them to your `.vimrc` to enable their features.
-
------------------
-
-```
-let g:javascript_plugin_jsdoc = 1
-```
-
-Enables syntax highlighting for [JSDocs](http://usejsdoc.org/).
-
-Default Value: 0
-
------------------
-
-```
-let g:javascript_plugin_ngdoc = 1
-```
-
-Enables some additional syntax highlighting for NGDocs. Requires JSDoc plugin
-to be enabled as well.
-
-Default Value: 0
-
------------------
-
-```
-let g:javascript_plugin_flow = 1
-```
-
-Enables syntax highlighting for [Flow](https://flowtype.org/).
-
-Default Value: 0
-
------------------
-
-```vim
-augroup javascript_folding
-    au!
-    au FileType javascript setlocal foldmethod=syntax
-augroup END
-```
-
-Enables code folding for javascript based on our syntax file.
-
-Please note this can have a dramatic effect on performance.
-
-
-## Concealing Characters
-
-You can customize concealing characters, if your font provides the glyph you want, by defining one or more of the following
-variables:
-
-    let g:javascript_conceal_function             = "Æ’"
-    let g:javascript_conceal_null                 = "Ã¸"
-    let g:javascript_conceal_this                 = "@"
-    let g:javascript_conceal_return               = "â‡š"
-    let g:javascript_conceal_undefined            = "Â¿"
-    let g:javascript_conceal_NaN                  = "â„•"
-    let g:javascript_conceal_prototype            = "Â¶"
-    let g:javascript_conceal_static               = "â€¢"
-    let g:javascript_conceal_super                = "Î©"
-    let g:javascript_conceal_arrow_function       = "â‡’"
-    let g:javascript_conceal_noarg_arrow_function = "ðŸž…"
-    let g:javascript_conceal_underscore_arrow_function = "ðŸž…"
-
-
-You can enable concealing within VIM with:
-
-    set conceallevel=1
-
-OR if you wish to toggle concealing you may wish to bind a command such as the following which will map `<LEADER>l` (leader is usually the `\` key) to toggling conceal mode:
-
-    map <leader>l :exec &conceallevel ? "set conceallevel=0" : "set conceallevel=1"<CR>
-
-
-## Indentation Specific
-
-* `:h cino-:`
-* `:h cino-=`
-* `:h cino-star`
-* `:h cino-(`
-* `:h cino-w`
-* `:h cino-W`
-* `:h cino-U`
-* `:h cino-m`
-* `:h cino-M`
-* `:h 'indentkeys'`
-
-## Contributing
-
-Please follow the general code style
-guides (read the code) and in your pull request explain the reason for the
-proposed change and how it is valuable. All p.r.'s will be reviewed by a
-maintainer(s) then, hopefully, merged.
-
-Thank you!
-
-
-## License
-
-Distributed under the same terms as Vim itself. See `:help license`.
diff --git a/after/ftplugin/javascript.vim b/after/ftplugin/javascript.vim
deleted file mode 100644
index c6c42d6..0000000
--- a/after/ftplugin/javascript.vim
+++ /dev/null
@@ -1,12 +0,0 @@
-" Vim filetype plugin file
-" Language:     JavaScript
-" Maintainer:   vim-javascript community
-" URL:          https://github.com/pangloss/vim-javascript
-
-setlocal iskeyword+=$ suffixesadd+=.js
-
-if exists('b:undo_ftplugin')
-  let b:undo_ftplugin .= ' | setlocal iskeyword< suffixesadd<'
-else
-  let b:undo_ftplugin = 'setlocal iskeyword< suffixesadd<'
-endif
diff --git a/compiler/eslint.vim b/compiler/eslint.vim
deleted file mode 100644
index 7695a07..0000000
--- a/compiler/eslint.vim
+++ /dev/null
@@ -1,16 +0,0 @@
-" Vim compiler plugin
-" Language:     JavaScript
-" Maintainer:   vim-javascript community
-" URL:          https://github.com/pangloss/vim-javascript
-
-if exists("current_compiler")
-  finish
-endif
-let current_compiler = "eslint"
-
-if exists(":CompilerSet") != 2
-  command! -nargs=* CompilerSet setlocal <args>
-endif
-
-CompilerSet makeprg=eslint\ -f\ compact\ %
-CompilerSet errorformat=%f:\ line\ %l\\,\ col\ %c\\,\ %m
diff --git a/extras/ctags b/extras/ctags
deleted file mode 100644
index cdc4edc..0000000
--- a/extras/ctags
+++ /dev/null
@@ -1,8 +0,0 @@
---langdef=js
---langmap=js:.js
---regex-js=/([A-Za-z0-9._$]+)[ \t]*[:=][ \t]*\{/\1/,object/
---regex-js=/([A-Za-z0-9._$()]+)[ \t]*[:=][ \t]*function[ \t]*\(/\1/,function/
---regex-js=/function[ \t]+([A-Za-z0-9._$]+)[ \t]*([^)])/\1/,function/
---regex-js=/([A-Za-z0-9._$]+)[ \t]*[:=][ \t]*\[/\1/,array/
---regex-js=/([^= ]+)[ \t]*=[ \t]*[^"]'[^']*/\1/,string/
---regex-js=/([^= ]+)[ \t]*=[ \t]*[^']"[^"]*/\1/,string/
diff --git a/extras/flow.vim b/extras/flow.vim
deleted file mode 100644
index b34d710..0000000
--- a/extras/flow.vim
+++ /dev/null
@@ -1,109 +0,0 @@
-syntax region  jsFlowDefinition     contained                        start=/:/    end=/\%(\s*[,=;)\n]\)\@=/ contains=@jsFlowCluster containedin=jsParen
-syntax region  jsFlowArgumentDef    contained                        start=/:/    end=/\%(\s*[,)]\|=>\@!\)\@=/ contains=@jsFlowCluster
-syntax region  jsFlowArray          contained matchgroup=jsFlowNoise start=/\[/   end=/\]/        contains=@jsFlowCluster,jsComment fold
-syntax region  jsFlowObject         contained matchgroup=jsFlowNoise start=/{/    end=/}/         contains=@jsFlowCluster,jsComment fold
-syntax region  jsFlowExactObject    contained matchgroup=jsFlowNoise start=/{|/   end=/|}/       contains=@jsFlowCluster,jsComment fold
-syntax region  jsFlowParens         contained matchgroup=jsFlowNoise start=/(/  end=/)/ contains=@jsFlowCluster nextgroup=jsFlowArrow skipwhite keepend extend fold
-syntax match   jsFlowNoise          contained /[:;,<>]/
-syntax keyword jsFlowType           contained boolean number string null void any mixed JSON array Function object array bool class
-syntax keyword jsFlowTypeof         contained typeof skipempty skipwhite nextgroup=jsFlowTypeCustom,jsFlowType
-syntax match   jsFlowTypeCustom     contained /[0-9a-zA-Z_.]*/ skipwhite skipempty nextgroup=jsFlowGeneric
-syntax region  jsFlowGeneric                  matchgroup=jsFlowNoise start=/\k\@<=</ end=/>/ contains=@jsFlowCluster containedin=@jsExpression,jsFlowDeclareBlock
-syntax region  jsFlowGeneric        contained matchgroup=jsFlowNoise start=/</ end=/>(\@=/ oneline contains=@jsFlowCluster containedin=@jsExpression,jsFlowDeclareBlock
-syntax region  jsFlowObjectGeneric  contained matchgroup=jsFlowNoise start=/\k\@<=</ end=/>/ contains=@jsFlowCluster nextgroup=jsFuncArgs
-syntax match   jsFlowArrow          contained /=>/ skipwhite skipempty nextgroup=jsFlowType,jsFlowTypeCustom,jsFlowParens
-syntax match   jsFlowObjectKey      contained /[0-9a-zA-Z_$?]*\(\s*:\)\@=/ contains=jsFunctionKey,jsFlowMaybe skipwhite skipempty nextgroup=jsObjectValue containedin=jsObject
-syntax match   jsFlowOrOperator     contained /|/ skipwhite skipempty nextgroup=@jsFlowCluster
-syntax keyword jsFlowImportType     contained type typeof skipwhite skipempty nextgroup=jsModuleAsterisk,jsModuleKeyword,jsModuleGroup
-syntax match   jsFlowWildcard       contained /*/
-
-syntax match   jsFlowReturn         contained /:\s*/ contains=jsFlowNoise skipwhite skipempty nextgroup=@jsFlowReturnCluster,jsFlowArrow,jsFlowReturnParens
-syntax region  jsFlowReturnObject   contained matchgroup=jsFlowNoise start=/{/    end=/}/  contains=@jsFlowCluster skipwhite skipempty nextgroup=jsFuncBlock,jsFlowReturnOrOp extend fold
-syntax region  jsFlowReturnArray    contained matchgroup=jsFlowNoise start=/\[/   end=/\]/ contains=@jsFlowCluster skipwhite skipempty nextgroup=jsFuncBlock,jsFlowReturnOrOp fold
-syntax region  jsFlowReturnParens   contained matchgroup=jsFlowNoise start=/(/    end=/)/  contains=@jsFlowCluster skipwhite skipempty nextgroup=jsFuncBlock,jsFlowReturnOrOp,jsFlowReturnArrow fold
-syntax match   jsFlowReturnArrow    contained /=>/ skipwhite skipempty nextgroup=@jsFlowReturnCluster
-syntax match   jsFlowReturnKeyword  contained /\k\+/ contains=jsFlowType,jsFlowTypeCustom skipwhite skipempty nextgroup=jsFlowReturnGroup,jsFuncBlock,jsFlowReturnOrOp,jsFlowReturnArray
-syntax match   jsFlowReturnMaybe    contained /?/ skipwhite skipempty nextgroup=jsFlowReturnKeyword,jsFlowReturnObject,jsFlowReturnParens
-syntax region  jsFlowReturnGroup    contained matchgroup=jsFlowNoise start=/</ end=/>/ contains=@jsFlowCluster skipwhite skipempty nextgroup=jsFuncBlock,jsFlowReturnOrOp
-syntax match   jsFlowReturnOrOp     contained /\s*|\s*/ skipwhite skipempty nextgroup=@jsFlowReturnCluster
-syntax match   jsFlowWildcardReturn contained /*/ skipwhite skipempty nextgroup=jsFuncBlock
-syntax keyword jsFlowTypeofReturn   contained typeof skipempty skipwhite nextgroup=@jsFlowReturnCluster
-
-syntax region  jsFlowFunctionGroup      contained matchgroup=jsFlowNoise start=/</ end=/>/ contains=@jsFlowCluster skipwhite skipempty nextgroup=jsFuncArgs
-syntax region  jsFlowClassGroup         contained matchgroup=jsFlowNoise start=/</ end=/>/ contains=@jsFlowCluster skipwhite skipempty nextgroup=jsClassBlock
-syntax region  jsFlowClassFunctionGroup contained matchgroup=jsFlowNoise start=/</ end=/>/ contains=@jsFlowCluster skipwhite skipempty nextgroup=jsFuncArgs
-syntax match   jsFlowObjectFuncName contained /\<\K\k*<\@=/ skipwhite skipempty nextgroup=jsFlowObjectGeneric containedin=jsObject
-
-syntax region  jsFlowTypeStatement                                   start=/\(opaque\s\+\)\?type\%(\s\+\k\)\@=/    end=/=\@=/ contains=jsFlowTypeOperator oneline skipwhite skipempty nextgroup=jsFlowTypeValue keepend
-syntax region  jsFlowTypeValue      contained     matchgroup=jsFlowNoise start=/=/ end=/\%(;\|\n\%(\s*|\)\@!\)/ contains=@jsFlowCluster,jsFlowGeneric,jsFlowMaybe
-syntax match   jsFlowTypeOperator   contained /=/ containedin=jsFlowTypeValue
-syntax match   jsFlowTypeOperator   contained /=/
-syntax keyword jsFlowTypeKeyword    contained type
-
-syntax keyword jsFlowDeclare                  declare skipwhite skipempty nextgroup=jsFlowTypeStatement,jsClassDefinition,jsStorageClass,jsFlowModule,jsFlowInterface
-syntax match   jsFlowClassProperty  contained /\<[0-9a-zA-Z_$]*\>:\@=/ skipwhite skipempty nextgroup=jsFlowClassDef containedin=jsClassBlock
-syntax region  jsFlowClassDef       contained start=/:/    end=/\%(\s*[,=;)\n]\)\@=/ contains=@jsFlowCluster skipwhite skipempty nextgroup=jsClassValue
-
-syntax region  jsFlowModule         contained start=/module/ end=/\%({\|:\)\@=/ skipempty skipwhite nextgroup=jsFlowDeclareBlock contains=jsString
-syntax region  jsFlowInterface      contained start=/interface/ end=/{\@=/ skipempty skipwhite nextgroup=jsFlowInterfaceBlock contains=@jsFlowCluster
-syntax region  jsFlowDeclareBlock   contained matchgroup=jsFlowNoise start=/{/ end=/}/ contains=jsFlowDeclare,jsFlowNoise fold
-
-syntax match   jsFlowMaybe          contained /?/
-syntax region  jsFlowInterfaceBlock contained matchgroup=jsFlowNoise start=/{/ end=/}/ contains=jsObjectKey,jsObjectKeyString,jsObjectKeyComputed,jsObjectSeparator,jsObjectFuncName,jsFlowObjectFuncName,jsObjectMethodType,jsGenerator,jsComment,jsObjectStringKey,jsSpreadExpression,jsFlowNoise,jsFlowParens,jsFlowGeneric keepend fold
-
-syntax region  jsFlowParenAnnotation contained start=/:/ end=/[,=)]\@=/ containedin=jsParen contains=@jsFlowCluster
-
-syntax cluster jsFlowReturnCluster            contains=jsFlowNoise,jsFlowReturnObject,jsFlowReturnArray,jsFlowReturnKeyword,jsFlowReturnGroup,jsFlowReturnMaybe,jsFlowReturnOrOp,jsFlowWildcardReturn,jsFlowReturnArrow,jsFlowTypeofReturn
-syntax cluster jsFlowCluster                  contains=jsFlowArray,jsFlowObject,jsFlowExactObject,jsFlowNoise,jsFlowTypeof,jsFlowType,jsFlowGeneric,jsFlowMaybe,jsFlowParens,jsFlowOrOperator,jsFlowWildcard
-
-if version >= 508 || !exists("did_javascript_syn_inits")
-  if version < 508
-    let did_javascript_syn_inits = 1
-    command -nargs=+ HiLink hi link <args>
-  else
-    command -nargs=+ HiLink hi def link <args>
-  endif
-  HiLink jsFlowDefinition         PreProc
-  HiLink jsFlowClassDef           jsFlowDefinition
-  HiLink jsFlowArgumentDef        jsFlowDefinition
-  HiLink jsFlowType               Type
-  HiLink jsFlowTypeCustom         PreProc
-  HiLink jsFlowTypeof             PreProc
-  HiLink jsFlowTypeofReturn       PreProc
-  HiLink jsFlowArray              PreProc
-  HiLink jsFlowObject             PreProc
-  HiLink jsFlowExactObject        PreProc
-  HiLink jsFlowParens             PreProc
-  HiLink jsFlowGeneric            PreProc
-  HiLink jsFlowObjectGeneric      jsFlowGeneric
-  HiLink jsFlowReturn             PreProc
-  HiLink jsFlowParenAnnotation    PreProc
-  HiLink jsFlowReturnObject       jsFlowReturn
-  HiLink jsFlowReturnArray        jsFlowArray
-  HiLink jsFlowReturnParens       jsFlowParens
-  HiLink jsFlowReturnGroup        jsFlowGeneric
-  HiLink jsFlowFunctionGroup      PreProc
-  HiLink jsFlowClassGroup         PreProc
-  HiLink jsFlowClassFunctionGroup PreProc
-  HiLink jsFlowArrow              PreProc
-  HiLink jsFlowReturnArrow        PreProc
-  HiLink jsFlowTypeStatement      PreProc
-  HiLink jsFlowTypeKeyword        PreProc
-  HiLink jsFlowTypeOperator       Operator
-  HiLink jsFlowMaybe              PreProc
-  HiLink jsFlowReturnMaybe        PreProc
-  HiLink jsFlowClassProperty      jsClassProperty
-  HiLink jsFlowDeclare            PreProc
-  HiLink jsFlowModule             PreProc
-  HiLink jsFlowInterface          PreProc
-  HiLink jsFlowNoise              Noise
-  HiLink jsFlowObjectKey          jsObjectKey
-  HiLink jsFlowOrOperator         jsOperator
-  HiLink jsFlowReturnOrOp         jsFlowOrOperator
-  HiLink jsFlowWildcard           PreProc
-  HiLink jsFlowWildcardReturn     PreProc
-  HiLink jsFlowImportType         PreProc
-  HiLink jsFlowTypeValue          PreProc
-  HiLink jsFlowObjectFuncName     jsObjectFuncName
-  delcommand HiLink
-endif
diff --git a/extras/jsdoc.vim b/extras/jsdoc.vim
deleted file mode 100644
index 92c4b8b..0000000
--- a/extras/jsdoc.vim
+++ /dev/null
@@ -1,39 +0,0 @@
-"" syntax coloring for javadoc comments (HTML)
-syntax region jsComment    matchgroup=jsComment start="/\*\s*"  end="\*/" contains=jsDocTags,jsCommentTodo,jsCvsTag,@jsHtml,@Spell fold
-
-" tags containing a param
-syntax match  jsDocTags         contained "@\(alias\|api\|augments\|borrows\|class\|constructs\|default\|defaultvalue\|emits\|exception\|exports\|extends\|fires\|kind\|link\|listens\|member\|member[oO]f\|mixes\|module\|name\|namespace\|requires\|template\|throws\|var\|variation\|version\)\>" skipwhite nextgroup=jsDocParam
-" tags containing type and param
-syntax match  jsDocTags         contained "@\(arg\|argument\|cfg\|param\|property\|prop\|typedef\)\>" skipwhite nextgroup=jsDocType
-" tags containing type but no param
-syntax match  jsDocTags         contained "@\(callback\|define\|enum\|external\|implements\|this\|type\|return\|returns\|yields\)\>" skipwhite nextgroup=jsDocTypeNoParam
-" tags containing references
-syntax match  jsDocTags         contained "@\(lends\|see\|tutorial\)\>" skipwhite nextgroup=jsDocSeeTag
-" other tags (no extra syntax)
-syntax match  jsDocTags         contained "@\(abstract\|access\|accessor\|async\|author\|classdesc\|constant\|const\|constructor\|copyright\|deprecated\|desc\|description\|dict\|event\|example\|file\|file[oO]verview\|final\|function\|global\|ignore\|inherit[dD]oc\|inner\|instance\|interface\|license\|localdoc\|method\|mixin\|nosideeffects\|override\|overview\|preserve\|private\|protected\|public\|readonly\|since\|static\|struct\|todo\|summary\|undocumented\|virtual\)\>"
-
-syntax region jsDocType         contained matchgroup=jsDocTypeBrackets start="{" end="}" contains=jsDocTypeRecord oneline skipwhite nextgroup=jsDocParam
-syntax match  jsDocType         contained "\%(#\|\"\|\w\|\.\|:\|\/\)\+" skipwhite nextgroup=jsDocParam
-syntax region jsDocTypeRecord   contained start=/{/ end=/}/ contains=jsDocTypeRecord extend
-syntax region jsDocTypeRecord   contained start=/\[/ end=/\]/ contains=jsDocTypeRecord extend
-syntax region jsDocTypeNoParam  contained start="{" end="}" oneline
-syntax match  jsDocTypeNoParam  contained "\%(#\|\"\|\w\|\.\|:\|\/\)\+"
-syntax match  jsDocParam        contained "\%(#\|\$\|-\|'\|\"\|{.\{-}}\|\w\|\.\|:\|\/\|\[.\{-}]\|=\)\+"
-syntax region jsDocSeeTag       contained matchgroup=jsDocSeeTag start="{" end="}" contains=jsDocTags
-
-if version >= 508 || !exists("did_javascript_syn_inits")
-  if version < 508
-    let did_javascript_syn_inits = 1
-    command -nargs=+ HiLink hi link <args>
-  else
-    command -nargs=+ HiLink hi def link <args>
-  endif
-  HiLink jsDocTags              Special
-  HiLink jsDocSeeTag            Function
-  HiLink jsDocType              Type
-  HiLink jsDocTypeBrackets      jsDocType
-  HiLink jsDocTypeRecord        jsDocType
-  HiLink jsDocTypeNoParam       Type
-  HiLink jsDocParam             Label
-  delcommand HiLink
-endif
diff --git a/extras/ngdoc.vim b/extras/ngdoc.vim
deleted file mode 100644
index c513d87..0000000
--- a/extras/ngdoc.vim
+++ /dev/null
@@ -1,3 +0,0 @@
-syntax match  jsDocTags         contained /@\(link\|method[oO]f\|ngdoc\|ng[iI]nject\|restrict\)/ nextgroup=jsDocParam skipwhite
-syntax match  jsDocType         contained "\%(#\|\$\|\w\|\"\|-\|\.\|:\|\/\)\+" nextgroup=jsDocParam skipwhite
-syntax match  jsDocParam        contained "\%(#\|\$\|\w\|\"\|-\|\.\|:\|{\|}\|\/\|\[\|]\|=\)\+"
diff --git a/ftdetect/flow.vim b/ftdetect/flow.vim
deleted file mode 100644
index 3f1ea65..0000000
--- a/ftdetect/flow.vim
+++ /dev/null
@@ -1 +0,0 @@
-autocmd BufNewFile,BufRead *.flow setfiletype flow
diff --git a/ftdetect/javascript.vim b/ftdetect/javascript.vim
deleted file mode 100644
index 0048732..0000000
--- a/ftdetect/javascript.vim
+++ /dev/null
@@ -1,8 +0,0 @@
-fun! s:SelectJavascript()
-  if getline(1) =~# '^#!.*/bin/\%(env\s\+\)\?node\>'
-    set ft=javascript
-  endif
-endfun
-
-autocmd BufNewFile,BufRead *.{js,mjs,cjs,jsm,es,es6},Jakefile setfiletype javascript
-autocmd BufNewFile,BufRead * call s:SelectJavascript()
diff --git a/indent/javascript.vim b/indent/javascript.vim
deleted file mode 100644
index b759f0a..0000000
--- a/indent/javascript.vim
+++ /dev/null
@@ -1,477 +0,0 @@
-" Vim indent file
-" Language: Javascript
-" Maintainer: Chris Paul ( https://github.com/bounceme )
-" URL: https://github.com/pangloss/vim-javascript
-" Last Change: December 4, 2017
-
-" Only load this indent file when no other was loaded.
-if exists('b:did_indent')
-  finish
-endif
-let b:did_indent = 1
-
-" Now, set up our indentation expression and keys that trigger it.
-setlocal indentexpr=GetJavascriptIndent()
-setlocal autoindent nolisp nosmartindent
-setlocal indentkeys+=0],0)
-" Testable with something like:
-" vim  -eNs "+filetype plugin indent on" "+syntax on" "+set ft=javascript" \
-"       "+norm! gg=G" '+%print' '+:q!' testfile.js \
-"       | diff -uBZ testfile.js -
-
-let b:undo_indent = 'setlocal indentexpr< smartindent< autoindent< indentkeys<'
-
-" Only define the function once.
-if exists('*GetJavascriptIndent')
-  finish
-endif
-
-let s:cpo_save = &cpo
-set cpo&vim
-
-" indent correctly if inside <script>
-" vim/vim@690afe1 for the switch from cindent
-" overridden with b:html_indent_script1
-call extend(g:,{'html_indent_script1': 'inc'},'keep')
-
-" Regex of syntax group names that are or delimit string or are comments.
-let s:bvars = {
-      \ 'syng_strcom': 'string\|comment\|regex\|special\|doc\|template\%(braces\)\@!',
-      \ 'syng_str': 'string\|template\|special' }
-" template strings may want to be excluded when editing graphql:
-" au! Filetype javascript let b:syng_str = '^\%(.*template\)\@!.*string\|special'
-" au! Filetype javascript let b:syng_strcom = '^\%(.*template\)\@!.*string\|comment\|regex\|special\|doc'
-
-function s:GetVars()
-  call extend(b:,extend(s:bvars,{'js_cache': [0,0,0]}),'keep')
-endfunction
-
-" Get shiftwidth value
-if exists('*shiftwidth')
-  function s:sw()
-    return shiftwidth()
-  endfunction
-else
-  function s:sw()
-    return &l:shiftwidth ? &l:shiftwidth : &l:tabstop
-  endfunction
-endif
-
-" Performance for forwards search(): start search at pos rather than masking
-" matches before pos.
-let s:z = has('patch-7.4.984') ? 'z' : ''
-
-" Expression used to check whether we should skip a match with searchpair().
-let s:skip_expr = "s:SynAt(line('.'),col('.')) =~? b:syng_strcom"
-let s:in_comm = s:skip_expr[:-14] . "'comment\\|doc'"
-
-let s:rel = has('reltime')
-" searchpair() wrapper
-if s:rel
-  function s:GetPair(start,end,flags,skip)
-    return searchpair('\m'.a:start,'','\m'.a:end,a:flags,a:skip,s:l1,a:skip ==# 's:SkipFunc()' ? 2000 : 200)
-  endfunction
-else
-  function s:GetPair(start,end,flags,skip)
-    return searchpair('\m'.a:start,'','\m'.a:end,a:flags,a:skip,s:l1)
-  endfunction
-endif
-
-function s:SynAt(l,c)
-  let byte = line2byte(a:l) + a:c - 1
-  let pos = index(s:synid_cache[0], byte)
-  if pos == -1
-    let s:synid_cache[:] += [[byte], [synIDattr(synID(a:l, a:c, 0), 'name')]]
-  endif
-  return s:synid_cache[1][pos]
-endfunction
-
-function s:ParseCino(f)
-  let [s, n, divider] = [strridx(&cino, a:f)+1, '', 0]
-  while s && &cino[ s ] =~ '[^,]'
-    if &cino[ s ] == '.'
-      let divider = 1
-    elseif &cino[ s ] ==# 's'
-      if n !~ '\d'
-        return n . s:sw() + 0
-      endif
-      let n = str2nr(n) * s:sw()
-      break
-    else
-      let [n, divider] .= [&cino[ s ], 0]
-    endif
-    let s += 1
-  endwhile
-  return str2nr(n) / max([divider, 1])
-endfunction
-
-" Optimized {skip} expr, only callable from the search loop which
-" GetJavascriptIndent does to find the containing [[{(] (side-effects)
-function s:SkipFunc()
-  if s:top_col == 1
-    throw 'out of bounds'
-  elseif s:check_in
-    if eval(s:skip_expr)
-      return 1
-    endif
-    let s:check_in = 0
-  elseif getline('.') =~ '\%<'.col('.').'c\/.\{-}\/\|\%>'.col('.').'c[''"]\|\\$'
-    if eval(s:skip_expr)
-      return 1
-    endif
-  elseif search('\m`\|\${\|\*\/','nW'.s:z,s:looksyn)
-    if eval(s:skip_expr)
-      let s:check_in = 1
-      return 1
-    endif
-  else
-    let s:synid_cache[:] += [[line2byte('.') + col('.') - 1], ['']]
-  endif
-  let [s:looksyn, s:top_col] = getpos('.')[1:2]
-endfunction
-
-function s:AlternatePair()
-  let [pat, l:for] = ['[][(){};]', 2]
-  while s:SearchLoop(pat,'bW','s:SkipFunc()')
-    if s:LookingAt() == ';'
-      if !l:for
-        if s:GetPair('{','}','bW','s:SkipFunc()')
-          return
-        endif
-        break
-      else
-        let [pat, l:for] = ['[{}();]', l:for - 1]
-      endif
-    else
-      let idx = stridx('])}',s:LookingAt())
-      if idx == -1
-        return
-      elseif !s:GetPair(['\[','(','{'][idx],'])}'[idx],'bW','s:SkipFunc()')
-        break
-      endif
-    endif
-  endwhile
-  throw 'out of bounds'
-endfunction
-
-function s:Nat(int)
-  return a:int * (a:int > 0)
-endfunction
-
-function s:LookingAt()
-  return getline('.')[col('.')-1]
-endfunction
-
-function s:Token()
-  return s:LookingAt() =~ '\k' ? expand('<cword>') : s:LookingAt()
-endfunction
-
-function s:PreviousToken(...)
-  let [l:pos, tok] = [getpos('.'), '']
-  if search('\m\k\{1,}\|\S','ebW')
-    if getline('.')[col('.')-2:col('.')-1] == '*/'
-      if eval(s:in_comm) && !s:SearchLoop('\S\ze\_s*\/[/*]','bW',s:in_comm)
-        call setpos('.',l:pos)
-      else
-        let tok = s:Token()
-      endif
-    else
-      let two = a:0 || line('.') != l:pos[1] ? strridx(getline('.')[:col('.')],'//') + 1 : 0
-      if two && eval(s:in_comm)
-        call cursor(0,two)
-        let tok = s:PreviousToken(1)
-        if tok is ''
-          call setpos('.',l:pos)
-        endif
-      else
-        let tok = s:Token()
-      endif
-    endif
-  endif
-  return tok
-endfunction
-
-function s:Pure(f,...)
-  return eval("[call(a:f,a:000),cursor(a:firstline,".col('.').")][0]")
-endfunction
-
-function s:SearchLoop(pat,flags,expr)
-  return s:GetPair(a:pat,'\_$.',a:flags,a:expr)
-endfunction
-
-function s:ExprCol()
-  if getline('.')[col('.')-2] == ':'
-    return 1
-  endif
-  let bal = 0
-  while s:SearchLoop('[{}?:]','bW',s:skip_expr)
-    if s:LookingAt() == ':'
-      let bal -= !search('\m:\%#','bW')
-    elseif s:LookingAt() == '?'
-      if getline('.')[col('.'):col('.')+1] =~ '^\.\d\@!'
-        " ?. conditional chain, not ternary start
-      elseif !bal
-        return 1
-      else
-        let bal += 1
-      endif
-    elseif s:LookingAt() == '{'
-      return !s:IsBlock()
-    elseif !s:GetPair('{','}','bW',s:skip_expr)
-      break
-    endif
-  endwhile
-endfunction
-
-" configurable regexes that define continuation lines, not including (, {, or [.
-let s:opfirst = '^' . get(g:,'javascript_opfirst',
-      \ '\C\%([<>=,.?^%|/&]\|\([-:+]\)\1\@!\|\*\+\|!=\|in\%(stanceof\)\=\>\)')
-let s:continuation = get(g:,'javascript_continuation',
-      \ '\C\%([<=,.~!?/*^%|&:]\|+\@<!+\|-\@<!-\|=\@<!>\|\<\%(typeof\|new\|delete\|void\|in\|instanceof\|await\)\)') . '$'
-
-function s:Continues()
-  let tok = matchstr(strpart(getline('.'),col('.')-15,15),s:continuation)
-  if tok =~ '[a-z:]'
-    return tok == ':' ? s:ExprCol() : s:PreviousToken() != '.'
-  elseif tok !~ '[/>]'
-    return tok isnot ''
-  endif
-  return s:SynAt(line('.'),col('.')) !~? (tok == '>' ? 'jsflow\|^html' : 'regex')
-endfunction
-
-" Check if line 'lnum' has a balanced amount of parentheses.
-function s:Balanced(lnum,line)
-  let l:open = 0
-  let pos = match(a:line, '[][(){}]')
-  while pos != -1
-    if s:SynAt(a:lnum,pos + 1) !~? b:syng_strcom
-      let l:open += matchend(a:line[pos],'[[({]')
-      if l:open < 0
-        return
-      endif
-    endif
-    let pos = match(a:line, !l:open ? '[][(){}]' : '()' =~ a:line[pos] ?
-          \ '[()]' : '{}' =~ a:line[pos] ? '[{}]' : '[][]', pos + 1)
-  endwhile
-  return !l:open
-endfunction
-
-function s:OneScope()
-  if s:LookingAt() == ')' && s:GetPair('(', ')', 'bW', s:skip_expr)
-    let tok = s:PreviousToken()
-    return (count(split('for if let while with'),tok) ||
-          \ tok =~# '^await$\|^each$' && s:PreviousToken() ==# 'for') &&
-          \ s:Pure('s:PreviousToken') != '.' && !(tok == 'while' && s:DoWhile())
-  elseif s:Token() =~# '^else$\|^do$'
-    return s:Pure('s:PreviousToken') != '.'
-  elseif strpart(getline('.'),col('.')-2,2) == '=>'
-    call cursor(0,col('.')-1)
-    return s:PreviousToken() != ')' || s:GetPair('(', ')', 'bW', s:skip_expr)
-  endif
-endfunction
-
-function s:DoWhile()
-  let cpos = searchpos('\m\<','cbW')
-  while s:SearchLoop('\C[{}]\|\<\%(do\|while\)\>','bW',s:skip_expr)
-    if s:LookingAt() =~ '\a'
-      if s:Pure('s:IsBlock')
-        if s:LookingAt() ==# 'd'
-          return 1
-        endif
-        break
-      endif
-    elseif s:LookingAt() != '}' || !s:GetPair('{','}','bW',s:skip_expr)
-      break
-    endif
-  endwhile
-  call call('cursor',cpos)
-endfunction
-
-" returns total offset from braceless contexts. 'num' is the lineNr which
-" encloses the entire context, 'cont' if whether a:firstline is a continued
-" expression, which could have started in a braceless context
-function s:IsContOne(cont)
-  let [l:num, pind] = b:js_cache[1] ?
-        \ [b:js_cache[1], indent(b:js_cache[1]) + s:sw()] : [1,0]
-  let [ind, b_l] = [indent('.') + !a:cont, 0]
-  while line('.') > l:num && ind > pind || line('.') == l:num
-    if indent('.') < ind && s:OneScope()
-      let b_l += 1
-    elseif !a:cont || b_l || ind < indent(a:firstline)
-      break
-    else
-      call cursor(0,1)
-    endif
-    let ind = min([ind, indent('.')])
-    if s:PreviousToken() is ''
-      break
-    endif
-  endwhile
-  return b_l
-endfunction
-
-function s:IsSwitch()
-  return search(printf('\m\C\%%%dl\%%%dc%s',b:js_cache[1],b:js_cache[2],
-        \ '{\_s*\%(\%(\/\/.*\_$\|\/\*\_.\{-}\*\/\)\@>\_s*\)*\%(case\|default\)\>'),'nW'.s:z)
-endfunction
-
-" https://github.com/sweet-js/sweet.js/wiki/design#give-lookbehind-to-the-reader
-function s:IsBlock()
-  let tok = s:PreviousToken()
-  if join(s:stack) =~? 'xml\|jsx' && s:SynAt(line('.'),col('.')-1) =~? 'xml\|jsx'
-    let s:in_jsx = 1
-    return tok != '{'
-  elseif tok =~ '\k'
-    if tok ==# 'type'
-      return s:Pure('eval',"s:PreviousToken() !~# '^\\%(im\\|ex\\)port$' || s:PreviousToken() == '.'")
-    elseif tok ==# 'of'
-      return s:Pure('eval',"!s:GetPair('[[({]','[])}]','bW',s:skip_expr) || s:LookingAt() != '(' ||"
-            \ ."s:{s:PreviousToken() ==# 'await' ? 'Previous' : ''}Token() !=# 'for' || s:PreviousToken() == '.'")
-    endif
-    return index(split('return const let import export extends yield default delete var await void typeof throw case new in instanceof')
-          \ ,tok) < (line('.') != a:firstline) || s:Pure('s:PreviousToken') == '.'
-  elseif tok == '>'
-    return getline('.')[col('.')-2] == '=' || s:SynAt(line('.'),col('.')) =~? 'jsflow\|^html'
-  elseif tok == '*'
-    return s:Pure('s:PreviousToken') == ':'
-  elseif tok == ':'
-    return s:Pure('eval',"s:PreviousToken() =~ '^\\K\\k*$' && !s:ExprCol()")
-  elseif tok == '/'
-    return s:SynAt(line('.'),col('.')) =~? 'regex'
-  elseif tok !~ '[=~!<,.?^%|&([]'
-    return tok !~ '[-+]' || line('.') != a:firstline && getline('.')[col('.')-2] == tok
-  endif
-endfunction
-
-function GetJavascriptIndent()
-  call s:GetVars()
-  let s:synid_cache = [[],[]]
-  let l:line = getline(v:lnum)
-  " use synstack as it validates syn state and works in an empty line
-  let s:stack = [''] + map(synstack(v:lnum,1),"synIDattr(v:val,'name')")
-
-  " start with strings,comments,etc.
-  if s:stack[-1] =~? 'comment\|doc'
-    if l:line !~ '^\s*\/[/*]'
-      return l:line =~ '^\s*\*' ? cindent(v:lnum) : -1
-    endif
-  elseif s:stack[-1] =~? b:syng_str
-    if b:js_cache[0] == v:lnum - 1 && s:Balanced(v:lnum-1,getline(v:lnum-1))
-      let b:js_cache[0] = v:lnum
-    endif
-    return -1
-  endif
-
-  let nest = get(get(b:,'hi_indent',{}),'blocklnr')
-  let s:l1 = max([0, prevnonblank(v:lnum) - (s:rel ? 2000 : 1000), nest])
-  call cursor(v:lnum,1)
-  if s:PreviousToken() is ''
-    return
-  endif
-  let [l:lnum, lcol, pline] = getpos('.')[1:2] + [getline('.')[:col('.')-1]]
-
-  let l:line = substitute(l:line,'^\s*','','')
-  let l:line_s = l:line[0]
-  if l:line[:1] == '/*'
-    let l:line = substitute(l:line,'^\%(\/\*.\{-}\*\/\s*\)*','','')
-  endif
-  if l:line =~ '^\/[/*]'
-    let l:line = ''
-  endif
-
-  " the containing paren, bracket, or curly. Many hacks for performance
-  call cursor(v:lnum,1)
-  let idx = index([']',')','}'],l:line[0])
-  if b:js_cache[0] > l:lnum && b:js_cache[0] < v:lnum ||
-        \ b:js_cache[0] == l:lnum && s:Balanced(l:lnum,pline)
-    call call('cursor',b:js_cache[1:])
-  else
-    let [s:looksyn, s:top_col, s:check_in, s:l1] = [v:lnum - 1,0,0,
-          \ max([s:l1, &smc ? search('\m^.\{'.&smc.',}','nbW',s:l1 + 1) + 1 : 0])]
-    try
-      if idx != -1
-        call s:GetPair(['\[','(','{'][idx],'])}'[idx],'bW','s:SkipFunc()')
-      elseif getline(v:lnum) !~ '^\S' && s:stack[-1] =~? 'block\|^jsobject$'
-        if !s:GetPair('{','}','bW','s:SkipFunc()') && s:stack[-1] ==# 'jsObject'
-          return indent(l:lnum)
-        endif
-      else
-        call s:AlternatePair()
-      endif
-    catch /^\Cout of bounds$/
-      call cursor(v:lnum,1)
-    endtry
-    let b:js_cache[1:] = line('.') == v:lnum ? [0,0] : getpos('.')[1:2]
-  endif
-
-  let [b:js_cache[0], num] = [v:lnum, b:js_cache[1]]
-
-  let [num_ind, is_op, b_l, l:switch_offset, s:in_jsx] = [s:Nat(indent(num)),0,0,0,0]
-  if !num || s:LookingAt() == '{' && s:IsBlock()
-    let ilnum = line('.')
-    if num && !s:in_jsx && s:LookingAt() == ')' && s:GetPair('(',')','bW',s:skip_expr)
-      if ilnum == num
-        let [num, num_ind] = [line('.'), indent('.')]
-      endif
-      if idx == -1 && s:PreviousToken() ==# 'switch' && s:IsSwitch()
-        let l:switch_offset = &cino !~ ':' ? s:sw() : s:ParseCino(':')
-        if pline[-1:] != '.' && l:line =~# '^\%(default\|case\)\>'
-          return s:Nat(num_ind + l:switch_offset)
-        elseif &cino =~ '='
-          let l:case_offset = s:ParseCino('=')
-        endif
-      endif
-    endif
-    if idx == -1 && pline[-1:] !~ '[{;]'
-      call cursor(l:lnum, lcol)
-      let sol = matchstr(l:line,s:opfirst)
-      if sol is '' || sol == '/' && s:SynAt(v:lnum,
-            \ 1 + len(getline(v:lnum)) - len(l:line)) =~? 'regex'
-        if s:Continues()
-          let is_op = s:sw()
-        endif
-      elseif num && sol =~# '^\%(in\%(stanceof\)\=\|\*\)$' &&
-            \ s:LookingAt() == '}' && s:GetPair('{','}','bW',s:skip_expr) &&
-            \ s:PreviousToken() == ')' && s:GetPair('(',')','bW',s:skip_expr) &&
-            \ (s:PreviousToken() == ']' || s:LookingAt() =~ '\k' &&
-            \ s:{s:PreviousToken() == '*' ? 'Previous' : ''}Token() !=# 'function')
-        return num_ind + s:sw()
-      else
-        let is_op = s:sw()
-      endif
-      call cursor(l:lnum, lcol)
-      let b_l = s:Nat(s:IsContOne(is_op) - (!is_op && l:line =~ '^{')) * s:sw()
-    endif
-  elseif idx == -1 && s:LookingAt() == '(' && &cino =~ '(' &&
-        \ (search('\m\S','nbW',num) || s:ParseCino('U'))
-    let pval = s:ParseCino('(')
-    if !pval
-      let [Wval, vcol] = [s:ParseCino('W'), virtcol('.')]
-      if search('\m'.get(g:,'javascript_indent_W_pat','\S'),'W',num)
-        return s:ParseCino('w') ? vcol : virtcol('.')-1
-      endif
-      return Wval ? s:Nat(num_ind + Wval) : vcol
-    endif
-    return s:Nat(num_ind + pval + searchpair('\m(','','\m)','nbrmW',s:skip_expr,num) * s:sw())
-  endif
-
-  " main return
-  if l:line =~ '^[])}]\|^|}'
-    if l:line_s == ')'
-      if s:ParseCino('M')
-        return indent(l:lnum)
-      elseif num && &cino =~# 'm' && !s:ParseCino('m')
-        return virtcol('.') - 1
-      endif
-    endif
-    return num_ind
-  elseif num
-    return s:Nat(num_ind + get(l:,'case_offset',s:sw()) + l:switch_offset + b_l + is_op)
-  elseif nest
-    return indent(nextnonblank(nest+1)) + b_l + is_op
-  endif
-  return b_l + is_op
-endfunction
-
-let &cpo = s:cpo_save
-unlet s:cpo_save
diff --git a/syntax/flow.vim b/syntax/flow.vim
deleted file mode 100644
index 3f97218..0000000
--- a/syntax/flow.vim
+++ /dev/null
@@ -1,2 +0,0 @@
-runtime syntax/javascript.vim
-runtime extras/flow.vim
-- 
2.26.2

